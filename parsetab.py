
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'BLOCK CONJ DEG DOT INT MOVE NOUN POLITE REAL ROTATEprogram : statement_liststatement_list : statement_list statement\n                      | statementstatement : NOUN POLITE instruction_seq DOTinstruction_seq : instruction\n                       | instruction_seq CONJ instructioninstruction : rotate_instr\n                   | move_instrrotate_instr : ROTATE value DEGmove_instr : MOVE value BLOCKvalue : INT\n             | REAL'
    
_lr_action_items = {'NOUN':([0,2,3,5,13,],[4,4,-3,-2,-4,]),'$end':([1,2,3,5,13,],[0,-1,-3,-2,-4,]),'POLITE':([4,],[6,]),'ROTATE':([6,14,],[11,11,]),'MOVE':([6,14,],[12,12,]),'DOT':([7,8,9,10,19,20,21,],[13,-5,-7,-8,-6,-9,-10,]),'CONJ':([7,8,9,10,19,20,21,],[14,-5,-7,-8,-6,-9,-10,]),'INT':([11,12,],[16,16,]),'REAL':([11,12,],[17,17,]),'DEG':([15,16,17,],[20,-11,-12,]),'BLOCK':([16,17,18,],[-11,-12,21,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'statement_list':([0,],[2,]),'statement':([0,2,],[3,5,]),'instruction_seq':([6,],[7,]),'instruction':([6,14,],[8,19,]),'rotate_instr':([6,14,],[9,9,]),'move_instr':([6,14,],[10,10,]),'value':([11,12,],[15,18,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> statement_list','program',1,'p_program','parser_with_ply.py',98),
  ('statement_list -> statement_list statement','statement_list',2,'p_statement_list','parser_with_ply.py',102),
  ('statement_list -> statement','statement_list',1,'p_statement_list','parser_with_ply.py',103),
  ('statement -> NOUN POLITE instruction_seq DOT','statement',4,'p_statement','parser_with_ply.py',107),
  ('instruction_seq -> instruction','instruction_seq',1,'p_instruction_seq','parser_with_ply.py',111),
  ('instruction_seq -> instruction_seq CONJ instruction','instruction_seq',3,'p_instruction_seq','parser_with_ply.py',112),
  ('instruction -> rotate_instr','instruction',1,'p_instruction','parser_with_ply.py',116),
  ('instruction -> move_instr','instruction',1,'p_instruction','parser_with_ply.py',117),
  ('rotate_instr -> ROTATE value DEG','rotate_instr',3,'p_rotate_instr','parser_with_ply.py',121),
  ('move_instr -> MOVE value BLOCK','move_instr',3,'p_move_instr','parser_with_ply.py',130),
  ('value -> INT','value',1,'p_value','parser_with_ply.py',139),
  ('value -> REAL','value',1,'p_value','parser_with_ply.py',140),
]
